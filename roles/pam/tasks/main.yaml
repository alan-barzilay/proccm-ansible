# "NSS, as a proxy, helps find if a user name is valid(exists) or not,
# what's the IP address of a host name and more"
# PAM realiza autenticacao de fato do usuario
# ref boa sobre pam e nss: https://serverfault.com/a/538503

- name: Instalar pacote relacionado ao PAM
  become: true
  community.general.pacman:
    state: present
    name:
      - nss-pam-ldapd

  # A ordem de busca eh da esquerda pra direita, entao vai comecar pelo files e terminar no ldap
  # (files eh shadow e etc da maquina local)
  # ref pra mymachines: https://www.freedesktop.org/software/systemd/man/latest/nss-mymachines.html
- name: Edit nsswitch.conf - Adicionar LDAP na lista de lugares onde procurar info dos usuarios (passwd, group & shadow)
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nsswitch.conf
    regexp: "^{{ item }}:"
    line: "{{ item }}: files mymachines systemd ldap"
    state: present
    loop:
      - passwd
      - group
      - shadow

  # arquivo default eh comentado e bem util pra entender
- name: Configurar mapeamento entre NSS names e LDAP - /etc/nslcd.conf
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nslcd.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    loop:
      - {
          regexp: '^#?uri\s+ldap:',
          line: "uri ldap://proccm.redealuno.usp.br:{{ porta_ldap }}",
        }
      - {
          regexp: '^#?base\s+dc=',
          line: "base dc=proccm,dc=redealuno,dc=usp,dc=br",
        }
      - {
          regexp: "^#?rootpwmoddn",
          line: "rootpwmoddn cn=admin,dc=proccm,dc=redealuno,dc=usp,dc=br",
        }
      - {
          regexp: '^#?base\s+group',
          line: "base group ou=Group,dc=proccm,dc=redealuno,dc=usp,dc=br",
        }
      - {
          regexp: '^#?base\s+passwd',
          line: "base	passwd ou=People,dc=proccm,dc=redealuno,dc=usp,dc=br",
        }
      - {
          regexp: '^#?base\s+shadow',
          line: "base shadow ou=People,dc=proccm,dc=redealuno,dc=usp,dc=br",
        }
      - { regexp: "^#?ssl", line: "ssl start_tls" }
      - {
          regexp: "^#?tls_cacertfile",
          line: "tls_cacertfile /etc/ssl/certs/ca.cert",
        }

- name: Start & enable nslcd.service
  become: true
  ansible.builtin.service:
    name: nslcd.service
    state: started
    enabled: true

  # Esse eh o servico geral do PAM, qualquer outra coisa q n tenha sua propria configuracao, vai seguir o system-auth
- name: Configurar servico PAM para autenticar com LDAP - /etc/pam.d/system-auth
  become: true
  block:
    - name: Fazer com que PAM tente usar LDAP antes de autenticar com infos do sistema local
      community.general.pamd:
        name: system-auth
        type: "{{ item }}"
        control: required
        module_path: pam_unix.so # autenticacao do proprio sistema, util caso ldap esteja fora do ar
        new_type: "{{ item }}"
        new_control: sufficient
        new_module_path: pam_ldap.so
        state: before
        loop:
          - auth
          - account
          - password

      # todo: checar se essa task eh necessaria, como tamo setando pra opcional sepa q eh inutil
      # todo2 trocar esse target de before prum after
      # ref de q sepa tem linhas inuteis (optinal pam_permit)): https://bbs.archlinux.org/viewtopic.php?id=245892
    - name: pam - system-auth - session (na moral n sabemo mais do q isso, ass. barzimagnopatrick)
      community.general.pamd:
        name: system-auth
        type: session
        control: optional
        module_path: pam_permit.so # sempre retorna sucesso
        new_type: session
        new_control: optional
        new_module_path: pam_ldap.so
        state: before

- name: Configurar servico PAM para trocar de usuario (su) usando LDAP - /etc/pam.d/su
  become: true
  block:
    - name: Fazer com que LDAP seja sempre a primeira tentativa para verificar auth account e session
      community.general.pamd:
        name: su
        type: "{{ item.type }}"
        control: "{{ item.control }}"
        module_path: "{{ item.module_path }}"
        new_type: "{{ item.type }}"
        new_control: sufficient
        new_module_path: pam_ldap.so
        state: before
        loop:
          - {
              type: "auth",
              control: "sufficient",
              module_path: "pam_rootok.so", # Soh retorna successo se vc for o root (UID=0)
            }
          - { type: "account", control: "required", module_path: "pam_unix.so" }
          - { type: "session", control: "required", module_path: "pam_unix.so" }

    - name: Garantir que se todo resto falhar, tentaremos validar auth com os arquivos da maquina local
      community.general.pamd:
        name: su
        type: account
        control: sufficient
        module_path: pam_ldap.so
        new_type: auth
        new_control: required
        new_module_path: pam_unix.so
        state: before

    - name: Impedir sistema de proomptar usuario por senha novamente, quando possivel
      community.general.pamd:
        name: su
        type: auth
        control: required
        module_path: pam_unix.so
        module_arguments: "use_first_pass" # Se senha ja foi proomptada pra algo, tente usar ela antes de proomptar o usuario novamente
        state: args_present

  # su-l eh comando su com flag -l
  # Do man de su: Start the shell as a login shell with an environment similar to a real login:
- name: Tornar su identico ao su-l
  ansible.builtin.copy:
    src: /etc/pam.d/su
    dest: /etc/pam.d/su-l
    owner: root
    group: root
    mode: "0644"

  # ref legal: https://www.techrepublic.com/article/controlling-passwords-with-pam/
- name: Configurar servico PAM para autenticar usuario para usar passwd com LDAP - /etc/pam.d/passwd
  community.general.pamd:
    name: passwd
    type: password
    control: required
    module_path: pam_unix.so
    new_type: password
    new_control: sufficient
    new_module_path: pam_ldap.so
    state: before
